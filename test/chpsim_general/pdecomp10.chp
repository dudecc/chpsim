process lshift()(I?, O! : {0..2})
chp {  }

process rshift()(I?, O! : {0..2})
chp {  }

type barrel = union { default : {0..2};
                      shift {lshift, rshift} : {0..2};
                    };

type barrel2 = union { default : {0..2};
                       shift {lshift, rshift} : barrel;
                     };

process A()(O! : barrel2)
chp { <<; i : 1..10 : O!i MOD 3 >> }

process B()(I? : barrel2)
chp { <<; i : 1..10 : [#{I:I=i MOD 3}]; I >>; print("done") }

process AA()(O! : barrel2)
meta { instance a : A;
       connect a.O, O.shift.shift;
}

process main()()
meta { instance a : AA; instance b : B; connect a.O.shift.shift, b.I; }
